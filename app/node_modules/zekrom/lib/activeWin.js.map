{"version":3,"sources":["../src/activeWin.js"],"names":["fs","require","config","getConfig","exports","getActiveWindow","callback","repeats","interval","spawn","process","platform","parameters","push","ls","bin","stdout","setEncoding","on","responseTreatment","toString","stderr","stdin","end","response","window","replace","split","app","title","slice","path","configs","JSON","parse","readFileSync","join","__dirname","linux","win32","mac","Error","scriptUrl","script_url","subscript_url"],"mappings":"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","file":"activeWin.js","sourcesContent":["var fs = require(\"fs\");\nvar config = getConfig();\n\n/**\n * This callback handle the response request by getActiveWindow function\n * @callback getActiveWindowCallback\n * @param {app: string, window: string} window\n */\n\n/**\n * Get the active window\n * @param {getActiveWindowCallback} callback - The callback that handles the response.\n * @param {integer} [repeats  = 1] - Number of repeats; Use -1 to infinity repeats\n * @param {float}   [interval = 0] - Loop interval in seconds. For milliseconds use fraction (0.1 = 100ms)\n */\nexports.getActiveWindow = function(callback, repeats, interval) {\n  const spawn = require(\"child_process\").spawn;\n\n  interval = interval || 0;\n  repeats = repeats || 1;\n\n  // Scape negative number of repeats on Windows OS\n  if (process.platform === \"win32\" && repeats < 0) {\n    repeats = \"\\\\-1\";\n  }\n  let parameters;\n  parameters = config.parameters;\n  parameters.push(repeats);\n  parameters.push(\n    process.platform === \"win32\" ? (interval * 1000) | 0 : interval\n  );\n\n  // Run shell script\n  const ls = spawn(config.bin, parameters);\n  ls.stdout.setEncoding(\"utf8\");\n\n  // Obtain successful response from script\n  ls.stdout.on(\"data\", function(stdout) {\n    callback(responseTreatment(stdout.toString()));\n  });\n  // Obtain error response from script\n  ls.stderr.on(\"data\", function(stderr) {\n    throw stderr.toString();\n  });\n  ls.stdin.end();\n};\n\n/**\n * Treat and format the response string and put it into a object\n * @function reponseTreatment\n * @param {string} String received from script\n */\nfunction responseTreatment(response) {\n  let window = {};\n  if (process.platform === \"linux\") {\n    response = response\n      .replace(/(WM_CLASS|WM_NAME)(\\(\\w+\\)\\s=\\s)/g, \"\")\n      .split(\"\\n\", 2);\n    window.app = response[0];\n    window.title = response[1];\n  } else if (process.platform === \"win32\") {\n    response = response\n      .replace(/(@{ProcessName=| AppTitle=)/g, \"\")\n      .slice(0, -1)\n      .split(\";\", 2);\n    window.app = response[0];\n    window.title = response[1];\n  } else if (process.platform === \"darwin\") {\n    response = response.split(\",\");\n    window.app = response[0];\n    window.title = response[1].replace(/\\n$/, \"\").replace(/^\\s/, \"\");\n  }\n  return window;\n}\n\n/**\n * Get script config accordingly the operating system\n * @function getConfig\n */\nfunction getConfig() {\n  var path = require(\"path\");\n  // Retrieve configs\n  var configs = JSON.parse(\n    fs.readFileSync(\n      path.join(__dirname, \"../script/activeWin/configs.json\"),\n      \"utf8\"\n    )\n  );\n  const platform = process.platform;\n  switch (platform) {\n    case \"linux\":\n    case \"linux2\":\n      config = configs.linux;\n      break;\n    case \"win32\":\n      config = configs.win32;\n      break;\n    case \"darwin\":\n      config = configs.mac;\n      break;\n    default:\n      throw new Error(\"Operating System not supported yet. \" + platform);\n  }\n  let scriptUrl;\n  // Append directory to script url\n  scriptUrl = path.join(__dirname, config.script_url);\n  config.parameters.push(scriptUrl);\n\n  // Append directory to subscript url on OSX\n  if (process.platform === \"darwin\") {\n    config.parameters.push(path.join(__dirname, config.subscript_url));\n  }\n\n  return config;\n}\n"]}