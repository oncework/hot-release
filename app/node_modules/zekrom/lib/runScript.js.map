{"version":3,"sources":["../src/runScript.js"],"names":["log","macEnv","runPythonScriptRun","run","runScript","script","sync","readFileSync","options","result","catch","err","message","Error","args","Promise","commands","child","stdout","stderr","errData","split","shift","unshift","resolve","join","output","outputData","on","console","cmd","sh","error","Array","isArray"],"mappings":"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","file":"runScript.js","sourcesContent":["import appleScript from 'run-applescript';\nimport tStrings from 'sh-exec/src/tStrings';\nimport { exec } from 'child_process';\nimport pythonScript from 'python-shell';\nimport isPathExist from 'path-exists';\nimport { promisify } from 'bluebird';\nimport fs from 'fs';\nimport { isMac } from './platform';\n// import { existPy } from './checkCmd';\n\nimport debug from 'debug';\nconst log = debug('zekrom:runScript');\nconst macEnv = isMac();\nconst runPythonScriptRun = promisify(pythonScript.run);\n\nclass runScript {\n  static getScript(script) {\n    if (isPathExist.sync(script)) {\n      return fs.readFileSync(script, 'utf8');\n    } else {\n      return script;\n    }\n  }\n\n  static async applescript(script, options = {}) {\n    if (macEnv) {\n      const result = await appleScript(script).catch(err => {\n        return err.message;\n      });\n      return result;\n    }\n    throw new Error('Cannot support Mac else.');\n  }\n\n  static sh(...args) {\n    return new Promise(resolve => {\n      let commands = tStrings(...args);\n      log('sh commands:', commands);\n      commands = macEnv ? commands : `chcp 65001 && ${commands}`;\n      const child = exec(commands, (err, stdout, stderr) => {\n        if (err) {\n          const errData = err.message.split('\\n');\n          log('sh err before', errData);\n          errData.shift();\n          errData.unshift(`Program Process Error: \\n`);\n          log('sh err after', errData);\n          resolve(errData.join('\\n'));\n        }\n        let output = stderr || stdout;\n        output = macEnv ? output : (() => {\n          const outputData = output.split('\\n');\n          outputData.shift();\n          return outputData.join('\\n');\n        })();\n        log('sh', output);\n        resolve(output);\n      });\n      child.stdout.on('data', console.log);\n      child.stderr.on('data', console.log);\n    });\n  }\n\n  static async shell(script, cmd, options) {\n    try {\n      const stdout = await this.sh(\n        `${cmd} ${script} ${options.join(' ')}`\n      ).catch(err => {\n        return err;\n      });\n      return stdout;\n    } catch (error) {\n      return error.message;\n    }\n  }\n\n  static async js(script, cmd, options) {\n    try {\n      const stdout = await this.sh(\n        `${cmd} ${script} ${options.join(' ')}`\n      ).catch(err => {\n        return err;\n      });\n      return stdout;\n    } catch (error) {\n      return error.message;\n    }\n  }\n\n  static async python(script, options) {\n    try {\n      const result = await runPythonScriptRun(script, options).catch(err => {\n        return err.message;\n      });\n      log('python result ', result);\n      return Array.isArray(result) ? result.join('\\n') : result;\n    } catch (error) {\n      return error.message;\n    }\n  }\n}\n\nexport default runScript;\n"]}