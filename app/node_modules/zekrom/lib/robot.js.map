{"version":3,"sources":["../src/robot.js"],"names":["log","Robot","robot","meta","mouse","mouseMeta","screen","screenMeta","keyboard","keyboardMeta","commandDelay","keys","default","delay","setKeyboardDelay","command","callback","keyToggle","setTimeout","key","modifier","Object","includes","keyTap","Error","input","setKeyboard","wait","split","index","length","element","typeString","pos","getMousePos","size","getScreenSize","setMouseDelay","point","action","has","x","y","height","width","moveMouseSmooth","dragMouse","scrollMouse","getPixelColor","moveMouse","keyMapping","isDouble","mouseClick","timeOut","mouseToggle","startPoint","endPoint"],"mappings":"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","file":"robot.js","sourcesContent":["import robot from \"robotjs\";\nimport R from \"ramda\";\nimport debug from \"debug\";\n\nimport robotKeys from \"./robotKeys\";\n\nconst log = debug(\"zekrom:Robot\");\n\nclass Robot {\n  constructor() {\n    this.robot = robot;\n    this.meta = {\n      mouse: this.mouseMeta(),\n      screen: this.screenMeta(),\n      keyboard: this.keyboardMeta()\n    };\n    this.commandDelay = 5;\n  }\n\n  keyboardMeta() {\n    const keys = robotKeys.default;\n    return keys;\n  }\n\n  setKeyboard(delay) {\n    this.robot.setKeyboardDelay(delay);\n  }\n\n  executeKeyDown(command, callback) {\n    robot.keyToggle(command, \"down\");\n    setTimeout(() => {\n      callback();\n    }, this.commandDelay);\n  }\n\n  executeKeyUp(command, callback) {\n    robot.keyToggle(command, \"up\");\n    callback();\n  }\n\n  tap(key, modifier) {\n    if (modifier) {\n      if (\n        Object.keys(robotKeys.default).includes(key) &&\n        Object.keys(robotKeys.modifier).includes(modifier)\n      ) {\n        log(\"tap key: \", this.meta.keyboard[key], this.meta.keyboard[modifier]);\n        this.robot.keyTap(\n          this.meta.keyboard[key],\n          this.meta.keyboard[modifier]\n        );\n      }\n    } else {\n      if (Object.keys(robotKeys.default).includes(key)) {\n        log(\"tap key: \", this.meta.keyboard[key]);\n        this.robot.keyTap(this.meta.keyboard[key]);\n      } else {\n        throw new Error(\"you need set correct key\");\n      }\n    }\n  }\n\n  typing(input) {\n    this.setKeyboard(100);\n    const wait = input.split(\"\\n\");\n    for (let index = 0; index < wait.length; index++) {\n      this.robot.keyTap(\"enter\");\n      const element = wait[index];\n      this.robot.typeString(element);\n    }\n  }\n\n  mouseMeta() {\n    const pos = this.robot.getMousePos();\n    return pos;\n  }\n\n  screenMeta() {\n    const size = this.robot.getScreenSize();\n    return size;\n  }\n\n  setMouse(delay) {\n    this.robot.setMouseDelay(delay);\n  }\n\n  mouse(point, action) {\n    if (!R.has(\"x\", point)) {\n      switch (point) {\n        case \"current\":\n          point = this.mouseMeta();\n          break;\n        case \"LeftTop\":\n          point = {\n            x: 0,\n            y: 0\n          };\n          break;\n        case \"LeftBottom\":\n          point = {\n            x: 0,\n            y: this.meta.screen.height\n          };\n          break;\n        case \"RightTop\":\n          point = {\n            x: this.meta.screen.width,\n            y: 0\n          };\n          break;\n        case \"RightBottom\":\n          point = {\n            x: this.meta.screen.width,\n            y: this.meta.screen.height\n          };\n          break;\n        case \"center\":\n          point = {\n            x: this.meta.screen.width / 2,\n            y: this.meta.screen.height / 2\n          };\n          break;\n        default:\n          throw new Error(\"you need set correct action point\");\n      }\n    }\n    switch (action) {\n      case \"smooth\":\n        this.robot.moveMouseSmooth(point.x, point.y);\n        break;\n      case \"drag\":\n        this.robot.dragMouse(point.x, point.y);\n        break;\n      case \"scroll\":\n        this.robot.scrollMouse(point.x, point.y);\n        break;\n      case \"color\":\n        return this.robot.getPixelColor(point.x, point.y);\n      default:\n        this.robot.moveMouse(point.x, point.y);\n    }\n  }\n\n  click(point, keyMapping, isDouble, action) {\n    this.mouse(point, action);\n    this.robot.mouseClick(keyMapping, isDouble);\n  }\n\n  toggle(point, keyMapping, timeOut, action) {\n    this.mouse(point, action);\n    this.robot.mouseToggle(\"down\", keyMapping);\n    setTimeout(() => {\n      this.robot.mouseToggle(\"up\", keyMapping);\n    }, timeOut);\n  }\n\n  drag(startPoint, endPoint, action) {\n    this.mouse(startPoint, action);\n    this.robot.mouseToggle(\"down\");\n    this.mouse(endPoint, \"drag\");\n    this.robot.mouseToggle(\"up\");\n  }\n\n  scroll(point) {\n    this.mouse(point, \"scroll\");\n  }\n}\n\nexport default Robot;\n"]}