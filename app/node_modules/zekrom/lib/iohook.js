"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // basic

// cpt

// util


// constant


var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _lodash = require("lodash");

var _ = _interopRequireWildcard(_lodash);

var _os = require("os");

var _jsonfile = require("jsonfile");

var _jsonfile2 = _interopRequireDefault(_jsonfile);

var _write = require("write");

var _write2 = _interopRequireDefault(_write);

var _npminstall = require("npminstall");

var _npminstall2 = _interopRequireDefault(_npminstall);

var _co = require("co");

var _co2 = _interopRequireDefault(_co);

var _pathExists = require("path-exists");

var _pathExists2 = _interopRequireDefault(_pathExists);

var _playSound = require("play-sound");

var _playSound2 = _interopRequireDefault(_playSound);

var _applescript = require("./applescript");

var _platform = require("./platform");

var _robot = require("./robot");

var _robot2 = _interopRequireDefault(_robot);

var _clipboard = require("./clipboard");

var _runScript = require("./runScript");

var _runScript2 = _interopRequireDefault(_runScript);

var _utils = require("./utils");

var _queryString = require("query-string");

var _queryString2 = _interopRequireDefault(_queryString);

var _keycode = require("./keycode");

var _keycode2 = _interopRequireDefault(_keycode);

var _debug = require("debug");

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var log = (0, _debug2.default)("zekrom:Iohook");

var IoHook = function () {
  function IoHook() {
    var isDev = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    _classCallCheck(this, IoHook);

    this.iohook = null;
    this.robot = null;
    this.player = (0, _playSound2.default)({});
    // 工作区
    this.workspace = _path2.default.join((0, _os.homedir)(), "Documents", "OnceWork");
    // 会员设置
    this.usageCounter = 20;
    this.toast = null;
    this.isMember = false;
    // 关键触发列表
    this.triggerList = [];
    // 替换类型
    this.fillIn = {
      clipboard: "%cv%",
      cursorPosition: "%c%",
      snippet: "%s:%"
    };
    this.cursorRegex = new RegExp("%c%", "gi");
    this.cursorClipboardRegex = new RegExp("%cv%", "gi");
    // 临时状态
    this.abbreviation = [];
    this.cursorNext = [];
    // 配置
    this.setting = {
      // 是否启动功能
      enableAbbr: true,
      enableSound: ["default"],
      soundList: {
        apple: _path2.default.join(__dirname, "../assets/audios/apple.mp3"),
        default: _path2.default.join(__dirname, "../assets/audios/default.mp3"),
        huaji: _path2.default.join(__dirname, "../assets/audios/huaji.mp3"),
        mobileqq: _path2.default.join(__dirname, "../assets/audios/mobileqq.mp3"),
        momo: _path2.default.join(__dirname, "../assets/audios/momo.mp3"),
        pcqq: _path2.default.join(__dirname, "../assets/audios/pcqq.mp3"),
        custom: ""
      },
      // 默认删除撤除: 14: 'backspace'
      tapRemove: 14,
      // 重置当前的Abbr: 29: 'ctrl
      tapResetAbbr: 29,
      // 触发键盘: 57: 'space', 28: 'enter', 96: 'r enter', 15: 'tab', 1: 'esc',
      triggerKey: ["57", "96", "15", "1"],
      // 触发下一级: 56: 'alt', 3640: ''
      jumpNextCursor: ["56", "3640"],
      pythonPath: "C:\\Python27"
    };
  }

  _createClass(IoHook, [{
    key: "setSetting",
    value: function setSetting(setting) {
      this.setting = Object.assign(this.setting, setting);
    }

    /**
     * 注册监听
     */

  }, {
    key: "register",
    value: function register() {
      var _this = this;

      // 记录并清除
      this.iohook.on("keydown", function (keydownConfig) {
        var keycode = keydownConfig.keycode,
            shiftKey = keydownConfig.shiftKey;

        log("curr keycode: ", keycode, shiftKey);
        // 跳转下一个 %c%
        if (_this.setting.jumpNextCursor.includes(String(keycode)) && !_.isEmpty(_this.cursorNext)) {
          return _this.triggerCursorByEditor();
        }
        _this.recordAbbr(keycode, shiftKey);
      });
      this.iohook.on("mouseclick", function () {
        _this.resetAbbr();
      });
      this.iohook.on("keyup", function (_ref) {
        var keycode = _ref.keycode;

        if (keycode === _this.setting.tapResetAbbr) {
          return _this.resetAbbr();
        }
      });
    }

    /**
     * 启动监听
     */

  }, {
    key: "run",
    value: async function run() {
      var iohook = require("iohook");
      this.iohook = iohook;
      this.robot = new _robot2.default();
      this.register();
      this.iohook.start(false);
      // 支持 babel-node
      await _write2.default.sync(this.workspace + "/.babelrc", "{\"presets\": [\"es2015\"]}");
      await this.initNpmLib();
    }

    /**
     * 初始化npm
     * @returns {Promise<void>}
     */

  }, {
    key: "initNpmLib",
    value: async function initNpmLib() {
      var that = this;
      var pkgsJson = await this.getNpmLib();
      (0, _co2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _npminstall2.default)({
                  // install root dir
                  root: "" + that.workspace,
                  pkgs: pkgsJson,
                  // install to specific directory, default to root
                  targetDir: "" + that.workspace,
                  // link bin to specific directory (for global install)
                  // binDir: '/home/admin/.global/bin',
                  // debug: false,
                  storeDir: that.workspace + "/node_modules",
                  ignoreScripts: true // ignore pre/post install scripts, default is `false`
                  // forbiddenLicenses: forbit install packages which used these licenses
                });

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      })).catch(function (err) {
        console.error(err.stack);
      });
    }

    /**
     * 获取npm列表
     * @returns {Promise<*|Array>}
     */

  }, {
    key: "getNpmLib",
    value: async function getNpmLib() {
      var pkgsJson = [];
      if (!_pathExists2.default.sync(this.workspace + "/npm.libs.json")) {
        await _write2.default.sync(this.workspace + "/npm.libs.json", "\n      [{\n          \"name\": \"babel-node\",\n          \"version\": \"^6.5.3\"\n        },\n        {\n          \"name\": \"babel-preset-es2015\",\n          \"version\": \"^6.24.1\"\n        }\n      ]");
      }
      pkgsJson = _jsonfile2.default.readFileSync(this.workspace + "/npm.libs.json");
      return pkgsJson;
    }

    /**
     * 清空workspace
     */

  }, {
    key: "setWorkspace",
    value: function setWorkspace() {
      this.workspace = null;
    }

    /**
     * 注入触发列表
     * @param triggerList
     */

  }, {
    key: "setTriggerList",
    value: function setTriggerList(triggerList) {
      this.triggerList = JSON.parse(JSON.stringify(triggerList));
    }

    /**
     * 记录监听按键
     * @param key
     * @param shiftKey
     * @returns {Promise<undefined|void>}
     */

  }, {
    key: "recordAbbr",
    value: function recordAbbr(key, shiftKey) {
      if (key === this.setting.tapRemove) {
        this.abbreviation.pop();
        return;
      }
      var keyWork = void 0;
      if (shiftKey) {
        keyWork = _keycode2.default.validRecordShift[key];
      } else {
        keyWork = _keycode2.default.validRecord[key];
      }
      var abbr = this.abbreviation.join("");
      log("curr abbr: ", abbr);
      if (!_.isEmpty(abbr)) {
        var matchAbbrItem = _.find(this.triggerList, ["abbr", abbr]);
        log("curr matchAbbr: ", matchAbbrItem);
        // check is
        if (this.isTrigger(key) && !_.isNil(matchAbbrItem)) {
          this.resetCursorNext();
          return this.trigger(matchAbbrItem, key);
        }
      }
      // record to abbr
      if (!_.isEmpty(keyWork)) {
        this.abbreviation.push(keyWork);
        return;
      }
      this.resetAbbr();
    }

    /**
     * 重置记录监听结果集
     */

  }, {
    key: "resetAbbr",
    value: function resetAbbr() {
      this.abbreviation = [];
    }

    /**
     * 重置记录 %c% 相对位置
     */

  }, {
    key: "resetCursorNext",
    value: function resetCursorNext() {
      this.cursorNext = [];
    }

    /**
     * 是否为有效的监听值
     * @param {*} key
     */

  }, {
    key: "isTrigger",
    value: function isTrigger(key) {
      return this.setting.triggerKey.includes(String(key));
    }
  }, {
    key: "parseContent",
    value: function parseContent(content) {
      content = this.replaceClipboard(content);
      content = this.replaceCursor(content);
      return content;
    }

    /**
     * 思路:
     * 1. 替换文本中的 % cv %
     * @param {*} content
     */

  }, {
    key: "replaceClipboard",
    value: function replaceClipboard(content) {
      var contentLines = content.split("\n");
      var contentResult = [];
      var contentMax = contentLines.length;
      var getClipboard = (0, _clipboard.getFromClipboard)();
      for (var lineNumber = 0; lineNumber < contentMax; lineNumber++) {
        var contentLine = contentLines[lineNumber];
        contentLine = contentLine.replace(this.cursorClipboardRegex, getClipboard);
        contentResult.push(contentLine);
      }
      return contentResult.join("\n");
    }

    /**
     * 思路:
     * 1.替换文本中的 %c%
     * @param {*} content 处理的文本
     */

  }, {
    key: "replaceCursor",
    value: function replaceCursor(content) {
      var contentLines = content.split("\n");
      var contentResult = [];
      var contentMax = contentLines.length;
      for (var lineNumber = 0; lineNumber < contentMax; lineNumber++) {
        var contentLine = contentLines[lineNumber];
        contentLine = this.recordCursorPosition(contentLine, lineNumber, contentMax);
        contentResult.push(contentLine);
      }
      this.cursorNext = IoHook.relativeCursorPosition(this.cursorNext);
      return contentResult.join("\n");
    }

    /**
     * 思路:
     * 1.初始记录当前标记 %c% 的位置
     * @param {*} contentLine
     * @param {*} lineNumber
     * @param {*} contentMax
     */

  }, {
    key: "recordCursorPosition",
    value: function recordCursorPosition(contentLine, lineNumber, contentMax) {
      var positions = (0, _utils.indexes)(contentLine, this.fillIn.cursorPosition);
      // remove out the flag and figure out the pad length
      contentLine = contentLine.replace(this.cursorRegex, "");
      var contentLineMax = contentLine.length;
      for (var i = 0; i < positions.length; i++) {
        var position = positions[i];
        log("recordCursorPosition position", position);
        log("recordCursorPosition contentLineMax", contentLineMax);
        this.cursorNext.push({
          padUp: contentMax - lineNumber - 1,
          padLeft: contentLineMax - position + i * this.fillIn.cursorPosition.length
        });
      }
      log("recordCursorPosition", this.cursorNext);
      return contentLine;
    }

    /**
     * 思路:
     * 1.计算出最近途径的 %c% 的位置
     * @param {*} cursorNext
     */

  }, {
    key: "triggerCursorByEditor",


    /**
     * 思路:
     * 1.触发跳转到指定的 %c% 的下一个位置
     * 2.默认只支持在常用的编辑器中
     */
    value: function triggerCursorByEditor() {
      if (!_.isEmpty(this.cursorNext)) {
        var cursorNextItem = this.cursorNext[0];
        log("Begin cursorNextItem", cursorNextItem);
        if (cursorNextItem) {
          if (cursorNextItem.padUp > 0) {
            for (var upTime = 0; upTime < cursorNextItem.padUp; upTime++) {
              log("Begin keyTap Up", upTime);
              this.robot.robot.keyTap("up");
            }
          } else {
            var cursorNextItemDown = Math.abs(cursorNextItem.padUp);
            log("Begin keyTap Down Max", cursorNextItemDown);
            for (var downTime = 0; downTime < cursorNextItemDown; downTime++) {
              log("Begin keyTap Down", downTime);
              this.robot.robot.keyTap("down");
            }
          }
          // to trigger end of line
          if ((0, _platform.isWindows)()) {
            this.robot.tap("RIGHT", "CONTROL");
          } else {
            this.robot.tap("RIGHT", "COMMAND");
          }
          for (var leftTime = 0; leftTime < cursorNextItem.padLeft; leftTime++) {
            log("Begin keyTap Left", leftTime);
            this.robot.robot.keyTap("left");
          }
        }
        this.cursorNext.shift();
        log("Rest cursorNext", this.cursorNext);
      }
      log("this.cursorNext empty");
    }
  }, {
    key: "abbrFileSync",
    value: function abbrFileSync(env, name, content) {
      var tempFileName = this.workspace + "/abbr." + name;
      switch (env) {
        case "plain":
          break;
        case "js":
          _write2.default.sync(tempFileName, "var oncework = {}; oncework.clipboard = decodeURIComponent(process.argv[2]);\n " + content);
          break;
        case "shell":
          _write2.default.sync(tempFileName, "\n          #!/bin/sh\n          alias decode='node -e \"console.log(decodeURIComponent(process.argv[1]))\"'\n          onceworkClipboard=`decode $1`\n          " + content + "\n          ");
          break;
        case "python":
          _write2.default.sync(tempFileName, "\nimport sys\nfrom urlparse import unquote\nclass oncework:\n  clipboard = unquote(sys.argv[1])\n" + content + "\n");
          break;
        case "applescript":
          break;
        default:
          console.log("not match");
      }
    }
  }, {
    key: "compileResult",
    value: async function compileResult(env, name, content, label, abbr) {
      var contentResult = null;
      if ((0, _platform.isWindows)() && (env === "shell" || env === "applescript")) {
        return "cannot support this feature in windows";
      }
      switch (env) {
        case "plain":
          contentResult = this.parseContent(content || this.getContent(name, env, label, abbr));
          break;
        case "js":
          var getClipboardJS = (0, _clipboard.getFromClipboard)();
          contentResult = await _runScript2.default.js(this.workspace + "/abbr." + name, "node", [JSON.stringify(encodeURIComponent(getClipboardJS))]);
          break;
        case "shell":
          var getClipboardSH = (0, _clipboard.getFromClipboard)();
          contentResult = await _runScript2.default.shell(this.workspace + "/abbr." + name, "sh", [JSON.stringify(encodeURIComponent(getClipboardSH))]);
          break;
        case "python":
          if (!(0, _platform.isMac)() && !_pathExists2.default.sync(this.setting.pythonPath)) {
            contentResult = "Please set python path to oncework software config.";
            break;
          }
          var getClipboardPY = (0, _clipboard.getFromClipboard)();
          contentResult = await _runScript2.default.python(this.workspace + "/abbr." + name, {
            mode: "text",
            pythonOptions: ["-u"],
            pythonPath: (0, _platform.isMac)() ? "python" : _path2.default.join(this.setting.pythonPath, "python"),
            scriptPath: (0, _platform.isMac)() ? "/" : null,
            args: ["" + JSON.stringify(encodeURIComponent(getClipboardPY))]
          });
          break;
        case "applescript":
          contentResult = await _runScript2.default.applescript(content || this.getContent(name, env, label, abbr));
          break;
        default:
          contentResult = this.parseContent(content || this.getContent(name, env, label, abbr));
      }
      return contentResult;
    }

    /**
     * 思路:
     * 1.粘贴出指定的文本
     * @param {*} matchAbbrItem
     * @param {*} key
     */

  }, {
    key: "trigger",
    value: async function trigger(matchAbbrItem, key) {
      log("trigger matchAbbrItem", matchAbbrItem);
      if (!this.prohibitTrigger()) {
        return;
      }
      var abbr = matchAbbrItem.abbr,
          name = matchAbbrItem.name,
          env = matchAbbrItem.env,
          label = matchAbbrItem.label;

      this.remove(abbr, key);
      // 重置下一次的跳转
      this.resetCursorNext();
      var oldClipboard = (0, _clipboard.getFromClipboard)();
      var contentResult = await this.compileResult(env, name, null, label, abbr);
      await (0, _applescript.applescriptCopy)(contentResult);
      if ((0, _platform.isMac)()) {
        await (0, _applescript.applescriptPaste)();
      } else {
        this.robot.tap("V", "CONTROL");
      }
      if (!_.isEmpty(this.setting.enableSound)) {
        console.log(this.setting.soundList[this.setting.enableSound]);
        this.player.play(this.setting.soundList[this.setting.enableSound], { timeout: 300 }, function (err) {
          console.log(err);
        });
      }
      setTimeout(function () {
        (0, _applescript.applescriptCopy)(oldClipboard);
      }, 500);
      this.triggerCursorByEditor();
      this.resetAbbr();
    }
  }, {
    key: "setMember",
    value: function setMember(isMember) {
      this.isMember = isMember;
    }
  }, {
    key: "setUsageCounter",
    value: function setUsageCounter(count) {
      this.usageCounter = count;
    }
  }, {
    key: "setToast",
    value: function setToast(toast) {
      this.toast = toast;
    }
  }, {
    key: "prohibitTrigger",
    value: function prohibitTrigger() {
      if (!this.setting.enableAbbr) {
        return false;
      }
      if (this.isMember) {
        return true;
      }
      if (this.usageCounter > 0) {
        this.usageCounter = this.usageCounter - 1;
        if (_.isFunction(this.toast)) {
          this.toast(this.usageCounter);
        }
        return true;
      }
      if (_.isFunction(this.toast)) {
        this.toast(this.usageCounter);
      }
      return false;
    }
  }, {
    key: "getContent",
    value: function getContent(name, env, label, abbr) {
      if (_.isString(name)) {
        var file = name.split("_");
        var realFile = _jsonfile2.default.readFileSync(this.workspace + "/snippet." + file[0] + ".json");
        if (realFile) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = Object.entries(realFile.files)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _step$value = _slicedToArray(_step.value, 2),
                  k = _step$value[0],
                  v = _step$value[1];

              var config = _queryString2.default.parse(k);
              if (config.env === (env || undefined) && config.abbr === (abbr || undefined) && config.label === (label || undefined)) {
                return v.content;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }
    }

    /**
     * 因为触发功能是会产生多余的键, 需要删除
     * @param abbr
     * @param key
     */

  }, {
    key: "remove",
    value: function remove(abbr, key) {
      var abbrLen = abbr.split("");
      for (var index = 0; index < abbrLen.length; index++) {
        this.robot.robot.keyTap("backspace");
      }
      // avoid space and tap trigger
      if (this.setting.triggerKey.includes(String(key))) {
        this.robot.robot.keyTap("backspace");
      }
    }
  }], [{
    key: "relativeCursorPosition",
    value: function relativeCursorPosition(cursorNext) {
      var relativeCursorNext = [];
      relativeCursorNext.push(cursorNext[0]);
      for (var i = 1; i < cursorNext.length; i++) {
        relativeCursorNext.push({
          padUp: cursorNext[i].padUp - cursorNext[i - 1].padUp,
          padLeft: cursorNext[i].padLeft
        });
      }
      return relativeCursorNext;
    }
  }]);

  return IoHook;
}();

exports.default = IoHook;
//# sourceMappingURL=iohook.js.map