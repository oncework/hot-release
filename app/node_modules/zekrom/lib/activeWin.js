"use strict";

var fs = require("fs");
var config = getConfig();

/**
 * This callback handle the response request by getActiveWindow function
 * @callback getActiveWindowCallback
 * @param {app: string, window: string} window
 */

/**
 * Get the active window
 * @param {getActiveWindowCallback} callback - The callback that handles the response.
 * @param {integer} [repeats  = 1] - Number of repeats; Use -1 to infinity repeats
 * @param {float}   [interval = 0] - Loop interval in seconds. For milliseconds use fraction (0.1 = 100ms)
 */
exports.getActiveWindow = function (callback, repeats, interval) {
  var spawn = require("child_process").spawn;

  interval = interval || 0;
  repeats = repeats || 1;

  // Scape negative number of repeats on Windows OS
  if (process.platform === "win32" && repeats < 0) {
    repeats = "\\-1";
  }
  var parameters = void 0;
  parameters = config.parameters;
  parameters.push(repeats);
  parameters.push(process.platform === "win32" ? interval * 1000 | 0 : interval);

  // Run shell script
  var ls = spawn(config.bin, parameters);
  ls.stdout.setEncoding("utf8");

  // Obtain successful response from script
  ls.stdout.on("data", function (stdout) {
    callback(responseTreatment(stdout.toString()));
  });
  // Obtain error response from script
  ls.stderr.on("data", function (stderr) {
    throw stderr.toString();
  });
  ls.stdin.end();
};

/**
 * Treat and format the response string and put it into a object
 * @function reponseTreatment
 * @param {string} String received from script
 */
function responseTreatment(response) {
  var window = {};
  if (process.platform === "linux") {
    response = response.replace(/(WM_CLASS|WM_NAME)(\(\w+\)\s=\s)/g, "").split("\n", 2);
    window.app = response[0];
    window.title = response[1];
  } else if (process.platform === "win32") {
    response = response.replace(/(@{ProcessName=| AppTitle=)/g, "").slice(0, -1).split(";", 2);
    window.app = response[0];
    window.title = response[1];
  } else if (process.platform === "darwin") {
    response = response.split(",");
    window.app = response[0];
    window.title = response[1].replace(/\n$/, "").replace(/^\s/, "");
  }
  return window;
}

/**
 * Get script config accordingly the operating system
 * @function getConfig
 */
function getConfig() {
  var path = require("path");
  // Retrieve configs
  var configs = JSON.parse(fs.readFileSync(path.join(__dirname, "../script/activeWin/configs.json"), "utf8"));
  var platform = process.platform;
  switch (platform) {
    case "linux":
    case "linux2":
      config = configs.linux;
      break;
    case "win32":
      config = configs.win32;
      break;
    case "darwin":
      config = configs.mac;
      break;
    default:
      throw new Error("Operating System not supported yet. " + platform);
  }
  var scriptUrl = void 0;
  // Append directory to script url
  scriptUrl = path.join(__dirname, config.script_url);
  config.parameters.push(scriptUrl);

  // Append directory to subscript url on OSX
  if (process.platform === "darwin") {
    config.parameters.push(path.join(__dirname, config.subscript_url));
  }

  return config;
}
//# sourceMappingURL=activeWin.js.map