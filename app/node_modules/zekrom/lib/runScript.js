'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
// import { existPy } from './checkCmd';

var _runApplescript = require('run-applescript');

var _runApplescript2 = _interopRequireDefault(_runApplescript);

var _tStrings = require('sh-exec/src/tStrings');

var _tStrings2 = _interopRequireDefault(_tStrings);

var _child_process = require('child_process');

var _pythonShell = require('python-shell');

var _pythonShell2 = _interopRequireDefault(_pythonShell);

var _pathExists = require('path-exists');

var _pathExists2 = _interopRequireDefault(_pathExists);

var _es6Promisify = require('es6-promisify');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _platform = require('./platform');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var log = (0, _debug2.default)('zekrom:runScript');
var macEnv = (0, _platform.isMac)();
var runPythonScriptRun = (0, _es6Promisify.promisify)(_pythonShell2.default.run);

var runScript = function () {
  function runScript() {
    _classCallCheck(this, runScript);
  }

  _createClass(runScript, null, [{
    key: 'getScript',
    value: function getScript(script) {
      if (_pathExists2.default.sync(script)) {
        return _fs2.default.readFileSync(script, 'utf8');
      } else {
        return script;
      }
    }
  }, {
    key: 'applescript',
    value: async function applescript(script) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (macEnv) {
        var result = await (0, _runApplescript2.default)(script).catch(function (err) {
          return err.message;
        });
        return result;
      }
      throw new Error('Cannot support Mac else.');
    }
  }, {
    key: 'sh',
    value: function sh() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new Promise(function (resolve) {
        var commands = _tStrings2.default.apply(undefined, args);
        log('sh commands:', commands);
        commands = macEnv ? commands : 'chcp 65001 && ' + commands;
        var child = (0, _child_process.exec)(commands, function (err, stdout, stderr) {
          if (err) {
            var errData = err.message.split('\n');
            log('sh err before', errData);
            errData.shift();
            errData.unshift('Program Process Error: \n');
            log('sh err after', errData);
            resolve(errData.join('\n'));
          }
          var output = stderr || stdout;
          output = macEnv ? output : function () {
            var outputData = output.split('\n');
            outputData.shift();
            return outputData.join('\n');
          }();
          log('sh', output);
          resolve(output);
        });
        child.stdout.on('data', console.log);
        child.stderr.on('data', console.log);
      });
    }
  }, {
    key: 'shell',
    value: async function shell(script, cmd, options) {
      try {
        var stdout = await this.sh(cmd + ' ' + script + ' ' + options.join(' ')).catch(function (err) {
          return err;
        });
        return stdout;
      } catch (error) {
        return error.message;
      }
    }
  }, {
    key: 'js',
    value: async function js(script, cmd, options) {
      try {
        var stdout = await this.sh(cmd + ' ' + script + ' ' + options.join(' ')).catch(function (err) {
          return err;
        });
        return stdout;
      } catch (error) {
        return error.message;
      }
    }
  }, {
    key: 'python',
    value: async function python(script, options) {
      try {
        var result = await runPythonScriptRun(script, options).catch(function (err) {
          return err.message;
        });
        log('python result ', result);
        return Array.isArray(result) ? result.join('\n') : result;
      } catch (error) {
        return error.message;
      }
    }
  }]);

  return runScript;
}();

exports.default = runScript;
//# sourceMappingURL=runScript.js.map